from opensearchpy import OpenSearch
import string

# Configuraci√≥n (igual que en tu otro c√≥digo)
OPENSEARCH_HOST = "localhost"
OPENSEARCH_PORT = 9200
OPENSEARCH_USER = "admin"
OPENSEARCH_PASS = "admin"

client = OpenSearch(
    hosts=[{"host": OPENSEARCH_HOST, "port": OPENSEARCH_PORT}],
    http_auth=(OPENSEARCH_USER, OPENSEARCH_PASS),
    use_ssl=False,
    verify_certs=False,
)

SINONIMOS_INGREDIENTES = {
    "pollo": ["gallina", "ave"],
    "gallina": ["pollo", "ave"],
    "ave": ["pollo", "gallina"],
    
    "ajo": ["diente de ajo", "ajo fresco"],
    "diente de ajo": ["ajo", "ajo fresco"],
    "ajo fresco": ["ajo", "diente de ajo"],

    "az√∫car": ["azucar", "dulce", "az√∫car refinado"],
    "azucar": ["az√∫car", "dulce", "az√∫car refinado"],
    "dulce": ["az√∫car", "azucar"],
    "az√∫car refinado": ["az√∫car", "azucar"],

    "tomate": ["jitomate", "tomate rojo"],
    "jitomate": ["tomate", "tomate rojo"],
    "tomate rojo": ["tomate", "jitomate"],
}

def expandir_con_sinonimos(query):
    palabras = query.lower().split()
    consulta_expandida = []
    
    for palabra in palabras:
        sinonimos = SINONIMOS_INGREDIENTES.get(palabra, [])
        # Incluye la palabra original + sus sin√≥nimos
        palabras_para_buscar = [palabra] + sinonimos
        
        # Por cada palabra + sin√≥nimos hacemos una consulta tipo should (OR)
        consulta_expandida.append({
            "multi_match": {
                "query": " ".join(palabras_para_buscar),
                "fields": ["titulo^3", "ingredientes_texto^2", "descripcion", "pasos", "contenido_total"],
                "fuzziness": "AUTO",
                "operator": "or"
            }
        })
    
    # Luego juntamos todo con un bool must (AND entre las palabras/sinonimos)
    return {
        "bool": {
            "must": consulta_expandida
        }
    }

# def buscar_recetas(query, index="recetas", size=5):
#     query_expandida = expandir_con_sinonimos(query)
#     # body = {
#     #     "query": {
#     #         "multi_match": {
#     #             "query": query,
#     #             "fields": ["titulo^3", "ingredientes_texto^2", "descripcion", "pasos", "contenido_total"],
#     #             "fuzziness": "AUTO"  # Aqu√≠ a√±adimos fuzziness
#     #         }
#     #     }
#     # }
#     body = {
#     "query": query_expandida,
#     "rescore": {
#         "window_size": 50,  # N√∫mero de resultados a reordenar (ajusta seg√∫n tu necesidad)
#         "query": {
#             "rescore_query": {
#                 "multi_match": {
#                     "query": query,
#                     "fields": ["titulo^3", "ingredientes_texto^2", "descripcion", "pasos", "contenido_total"],
#                     "type": "phrase",  # Busca frases ordenadas, m√°s exactas
#                     "slop": 3          # Permite que las palabras est√©n separadas o en distinto orden hasta cierto punto
#                 }
#             },
#             "query_weight": 0.7,   # Peso de la consulta original
#             "rescore_query_weight": 1.8  # Peso del rescore (m√°s importancia al rescore)
#         }
#     }
# }


#     response = client.search(index=index, body=body, size=size)

#     hits = response.get("hits", {}).get("hits", [])
    
#     if not hits:
#         print("No se encontraron recetas para la b√∫squeda:", query_expandida)
#         return

#     for hit in hits:
#         source = hit["_source"]
#         print(f"\nT√≠tulo: {source.get('titulo', '')}")
#         print(f"Ingredientes: {source.get('ingredientes_texto', '')}")
#         print(f"Descripci√≥n: {source.get('descripcion', '')}")
#         print(f"Pasos: {source.get('pasos', '')}")
#         print("-" * 40)
def buscar_recetas(query, index="recetas", size=5, return_hits=False):
    query_expandida = expandir_con_sinonimos(query)

    body = {
        "query": query_expandida,
        "rescore": {
            "window_size": 50,
            "query": {
                "rescore_query": {
                    "multi_match": {
                        "query": query,
                        "fields": ["titulo^3", "ingredientes_texto^2", "descripcion", "pasos", "contenido_total"],
                        "type": "phrase",
                        "slop": 3
                    }
                },
                "query_weight": 0.7,
                "rescore_query_weight": 1.8
            }
        }
    }

    response = client.search(index=index, body=body, size=size)
    hits = response.get("hits", {}).get("hits", [])

    recetas = []
    for hit in hits:
        source = hit["_source"]
        recetas.append({
            "titulo": source.get("titulo", ""),
            "ingredientes": source.get("ingredientes_texto", ""),
            "descripcion": source.get("descripcion", ""),
            "pasos": source.get("pasos", ""),
        })

    if return_hits:
        return recetas

    # Si es llamado desde script
    if not hits:
        print("No se encontraron recetas para la b√∫squeda:", query_expandida)
        return

    for receta in recetas:
        print(f"\nT√≠tulo: {receta['titulo']}")
        print(f"Ingredientes: {receta['ingredientes']}")
        print(f"Descripci√≥n: {receta['descripcion']}")
        print(f"Pasos: {receta['pasos']}")
        print("-" * 40)
        



def limpiar_stopwords(texto):
    texto = texto.lower()
    # Elimina puntuaci√≥n (como comas, puntos, etc.)
    texto = texto.translate(str.maketrans('', '', string.punctuation))

    stopwords = {
        "Quiero","quiero", "una", "unas", "un", "unos",
        "que", "ke",  # <-- aqu√≠ agregamos "ke"
        "tenga", "tengo", "tienes", "tiene", "tener",
        "reseta", "receta",  # <-- error com√∫n, puedes corregirlo o quitarlo
        "el", "la", "los", "las",
        "y", "o", "u",
        "de", "del", "en", "con", "para", "por", "se", "al", "a", "mi", "tu", "su",
        "como", "m√°s", "menos", "sin", "pero", "si",
        "me", "te", "le", "lo", "nos", "os", "les",
        "este", "esta", "estos", "estas",
        "es", "son", "fue", "era", "ser",
        "hoy", "ahora",
        "durante",
        "desde", "hasta",
        "antes", "despu√©s", "luego",
        "tambi√©n",
        "algo",
        "mucho", "muchos", "poco", "pocos",
        "cada",
        "todos", "todas",
        "donde",
        "cuando",
        "cual", "cuales",
        "porque", "por qu√©"
    }
    palabras = texto.split()
    palabras_filtradas = [p for p in palabras if p not in stopwords]
    return " ".join(palabras_filtradas)

if __name__ == "__main__":
    while True:
        consulta = input("Ingrese ingrediente o palabra para buscar recetas (o 'salir' para terminar): ").strip()
        query = limpiar_stopwords(consulta)
        print("üîç Texto limpio:", query)
        if consulta.lower() == "salir":
            break
        buscar_recetas(query)
